// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeguimientoEjecuciones.DataAccess.Context;

#nullable disable

namespace SeguimientoEjecuciones.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250117212509_Inicio")]
    partial class Inicio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("OperationPhasesId", b =>
                {
                    b.Property<Guid>("fasesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("operationsId")
                        .HasColumnType("TEXT");

                    b.HasKey("fasesId", "operationsId");

                    b.HasIndex("operationsId");

                    b.ToTable("OperationPhasesId");
                });

            modelBuilder.Entity("OperationProccessId", b =>
                {
                    b.Property<Guid>("operationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("procsId")
                        .HasColumnType("TEXT");

                    b.HasKey("operationsId", "procsId");

                    b.HasIndex("procsId");

                    b.ToTable("OperationProccessId");
                });

            modelBuilder.Entity("Seguimiento.domain.Entities.Executions.Execution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("actual_entity")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("beggin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("end")
                        .HasColumnType("datetime");

                    b.Property<string>("execType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("post_entity")
                        .HasColumnType("TEXT");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Execution", (string)null);
                });

            modelBuilder.Entity("Seguimiento.domain.Entities.Fases.Fase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fase", (string)null);
                });

            modelBuilder.Entity("Seguimiento.domain.Entities.Operations.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Operation", (string)null);
                });

            modelBuilder.Entity("Seguimiento.domain.Entities.Procedures.Procedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Procedure", (string)null);
                });

            modelBuilder.Entity("OperationPhasesId", b =>
                {
                    b.HasOne("Seguimiento.domain.Entities.Fases.Fase", null)
                        .WithMany()
                        .HasForeignKey("fasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seguimiento.domain.Entities.Operations.Operation", null)
                        .WithMany()
                        .HasForeignKey("operationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OperationProccessId", b =>
                {
                    b.HasOne("Seguimiento.domain.Entities.Operations.Operation", null)
                        .WithMany()
                        .HasForeignKey("operationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seguimiento.domain.Entities.Procedures.Procedure", null)
                        .WithMany()
                        .HasForeignKey("procsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
